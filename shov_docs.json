{
  "openapi": "3.0.3",
  "info": {
    "title": "Shov API",
    "description": "AI Database Engine with automatic vector search, edge caching, and unified data storage. Get started in 30 seconds with zero setup required.",
    "version": "1.0.0",
    "contact": {
      "name": "Shov Support",
      "url": "https://shov.com",
      "email": "support@shov.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://shov.com/api",
      "description": "Production API"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "API Key",
        "description": "Use your project API key as the bearer token"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "success": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Success": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          }
        }
      }
    }
  },
  "paths": {
    "/new": {
      "post": {
        "summary": "Create a new Shov project with automatic API key generation.",
        "description": "Create a new Shov project with automatic API key generation.\n\nProject names must be unique, alphanumeric with hyphens allowed. Your API key is generated immediately and should be stored securely. No email registration required.\n\n⚠️ IMPORTANT: Save your API key immediately - it cannot be recovered if lost.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests — Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/claim/initiate and /claim/verify": {
      "post": {
        "summary": "Claim an anonymous project by associating it with your email address.",
        "description": "Claim an anonymous project by associating it with your email address.\n\nThe claim process allows users who created projects anonymously to later associate them with their email address for dashboard access and management. This is a two-step process:\n\n1. **Initiate**: Send a verification code to the provided email\n2. **Verify**: Confirm ownership with the OTP code\n\n⚠️ IMPORTANT: Only anonymous projects can be claimed. Each user can only have one free organization, so claiming is limited if you already have a free organization.\n\nThe claim process includes rate limiting and abuse prevention to ensure security.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden — Project has already been claimed or you already have a free organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found — Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests — Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Your email address to associate with the project."
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        }
      }
    },
    "/set/{projectName}": {
      "post": {
        "summary": "Store a key-value pair.",
        "description": "Store a key-value pair.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The key for the value."
                  },
                  "value": {
                    "type": "object",
                    "description": "The JSON value to store."
                  }
                },
                "required": [
                  "key",
                  "value"
                ]
              }
            }
          }
        }
      }
    },
    "/get/{projectName}": {
      "post": {
        "summary": "Retrieve a key-value pair.",
        "description": "Retrieve a key-value pair.\n\nIf a key is not found, the command succeeds and returns a `null` value.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The key to retrieve."
                  }
                },
                "required": [
                  "key"
                ]
              }
            }
          }
        }
      }
    },
    "/forget/{projectName}": {
      "post": {
        "summary": "Permanently delete a key-value pair.",
        "description": "Permanently delete a key-value pair.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found — The requested key does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The key to delete."
                  }
                },
                "required": [
                  "key"
                ]
              }
            }
          }
        }
      }
    },
    "/add/{projectName}": {
      "post": {
        "summary": "Add a JSON object to a collection.",
        "description": "Add a JSON object to a collection.\n\nItem IDs are unique per collection. If no ID is provided, a unique one will be generated.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the collection."
                  },
                  "value": {
                    "type": "object",
                    "description": "The JSON object to add."
                  }
                },
                "required": [
                  "name",
                  "value"
                ]
              }
            }
          }
        }
      }
    },
    "/add-many/{projectName}": {
      "post": {
        "summary": "Add multiple JSON objects to a collection at once.",
        "description": "Add multiple JSON objects to a collection at once.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the collection."
                  },
                  "items": {
                    "type": "array",
                    "description": "An array of JSON objects to add.",
                    "items": {
                      "type": "object"
                    }
                  }
                },
                "required": [
                  "name",
                  "items"
                ]
              }
            }
          }
        }
      }
    },
    "/where/{projectName}": {
      "post": {
        "summary": "Filter items in a collection based on JSON properties.",
        "description": "Filter items in a collection based on JSON properties.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the collection to query."
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/update/{projectName}/{id}": {
      "post": {
        "summary": "Update an item in a collection by collection name and ID.",
        "description": "Update an item in a collection by collection name and ID.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found — Item with the specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "The name of the collection."
                  },
                  "value": {
                    "type": "object",
                    "description": "A JSON object containing the fields to update."
                  }
                },
                "required": [
                  "collection",
                  "value"
                ]
              }
            }
          }
        }
      }
    },
    "/remove/{projectName}/{id}": {
      "post": {
        "summary": "Remove an item from a collection by collection name and ID.",
        "description": "Remove an item from a collection by collection name and ID.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found — Item with the specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "The name of the collection."
                  }
                },
                "required": [
                  "collection"
                ]
              }
            }
          }
        }
      }
    },
    "/clear/{projectName}": {
      "post": {
        "summary": "Clear all items from a collection.",
        "description": "Clear all items from a collection.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the collection to clear."
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/batch/{projectName}": {
      "post": {
        "summary": "Execute multiple operations atomically in a single transaction.",
        "description": "Execute multiple operations atomically in a single transaction.\n\nBatch operations execute atomically - either all operations succeed or all fail. This is perfect for implementing complex workflows like e-commerce checkouts, user registration flows, or any scenario requiring data consistency across multiple operations.\n\nSupported operation types:\n• set - Set key-value pairs\n• get - Read values (for read-your-writes consistency)\n• add - Add items to collections\n• update - Update collection items by ID\n• remove - Remove collection items by ID\n• forget - Delete keys\n• clear - Clear entire collections\n\n⚠️ IMPORTANT: All operations in a batch are executed atomically. If any operation fails, the entire batch is rolled back and no changes are made.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict — One or more operations failed, entire transaction rolled back",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operations": {
                    "type": "array",
                    "description": "Array of operations to execute atomically.",
                    "items": {
                      "type": "object"
                    }
                  }
                },
                "required": [
                  "operations"
                ]
              }
            }
          }
        }
      }
    },
    "/count/{projectName}": {
      "post": {
        "summary": "Count the number of items in a collection with optional filtering.",
        "description": "Count the number of items in a collection with optional filtering.\n\nCOUNT returns the total number of items matching the filter criteria without transferring the actual data, making it efficient for large collections. Supports all the same filtering options as the WHERE operation.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the collection to count."
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/search/{projectName}": {
      "post": {
        "summary": "Perform vector search across keys and collections with optional filtering. Results are automatically filtered by relevance (minimum score 0.5 by default).",
        "description": "Perform vector search across keys and collections with optional filtering. Results are automatically filtered by relevance (minimum score 0.5 by default).\n\nVector search finds semantically similar items first, then applies JSON field filters for precise results. Filters use exact matching on JSON properties. Use --json flag for structured output suitable for scripting and automation.\n\n⚠️ IMPORTANT: Vector indexing has eventual consistency - there is a small delay between adding data and it becoming searchable. Plan your application logic accordingly.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "The search query string."
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          }
        }
      }
    },
    "/upload/{projectName}": {
      "post": {
        "summary": "Upload a file directly.",
        "description": "Upload a file directly.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found — File not found at the specified path",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filepath": {
                    "type": "string",
                    "description": "The local path to the file to upload."
                  }
                },
                "required": [
                  "filepath"
                ]
              }
            }
          }
        }
      }
    },
    "/upload-url/{projectName}": {
      "post": {
        "summary": "Get a pre-signed URL for client-side file uploads.",
        "description": "Get a pre-signed URL for client-side file uploads.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "description": "The name of the file to be uploaded."
                  }
                },
                "required": [
                  "filename"
                ]
              }
            }
          }
        }
      }
    },
    "/forget-file/{projectName}": {
      "post": {
        "summary": "Permanently delete a file.",
        "description": "Permanently delete a file.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found — File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "description": "The name of the file to delete."
                  }
                },
                "required": [
                  "filename"
                ]
              }
            }
          }
        }
      }
    },
    "/send-otp/{projectName}": {
      "post": {
        "summary": "Send a one-time password to an identifier.",
        "description": "Send a one-time password to an identifier.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identifier": {
                    "type": "string",
                    "description": "The identifier (e.g., email) to send the OTP to."
                  }
                },
                "required": [
                  "identifier"
                ]
              }
            }
          }
        }
      }
    },
    "/verify-otp/{projectName}": {
      "post": {
        "summary": "Verify a one-time password for an identifier.",
        "description": "Verify a one-time password for an identifier.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identifier": {
                    "type": "string",
                    "description": "The identifier (e.g., email) associated with the OTP."
                  },
                  "pin": {
                    "type": "string",
                    "description": "The one-time password to verify."
                  }
                },
                "required": [
                  "identifier",
                  "pin"
                ]
              }
            }
          }
        }
      }
    },
    "/broadcast/{projectName}": {
      "post": {
        "summary": "Broadcast a message to subscribers of a specific subscription.",
        "description": "Broadcast a message to subscribers of a specific subscription.\n\nBroadcast sends messages to all active subscribers matching the subscription criteria. The message is delivered immediately to connected clients. If no subscribers are active, the message is still recorded for analytics but not delivered.\n\n⚠️ IMPORTANT: Messages are not persisted - they are only delivered to currently connected subscribers. For persistent messaging, store the data using SET or ADD operations which will trigger auto-broadcasts.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subscription": {
                    "type": "object",
                    "description": "Subscription object with collection, key, or channel properties."
                  },
                  "message": {
                    "type": "object",
                    "description": "The message to broadcast to subscribers."
                  }
                },
                "required": [
                  "subscription",
                  "message"
                ]
              }
            }
          }
        }
      }
    },
    "/subscribe/{projectName}": {
      "get": {
        "summary": "Subscribe to real-time updates from collections, keys, or channels using Server-Sent Events.",
        "description": "Subscribe to real-time updates from collections, keys, or channels using Server-Sent Events.\n\nSubscribe creates a persistent Server-Sent Events (SSE) connection for real-time updates. The connection automatically handles reconnection and includes heartbeat messages every 10 seconds. \n\nSubscription Types:\n• Collection: Receives updates when items are added, updated, or removed from the collection\n• Key: Receives updates when the key-value pair is modified\n• Channel: Receives custom broadcast messages sent to the channel\n\n⚠️ IMPORTANT: Subscriptions require a streaming token for authentication. The CLI handles token creation automatically, but browser clients must create tokens first using the TOKEN endpoint.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden — Token does not have access to requested subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subscriptions": {
                    "type": "array",
                    "description": "Array of subscription objects with collection, key, or channel properties.",
                    "items": {
                      "type": "object"
                    }
                  }
                },
                "required": [
                  "subscriptions"
                ]
              }
            }
          }
        }
      }
    },
    "/token/{projectName}": {
      "post": {
        "summary": "Create a temporary token for various client-side operations.",
        "description": "Create a temporary token for various client-side operations.\n\nStream tokens are temporary, scoped credentials that allow clients to subscribe to real-time updates without exposing your API key. Each subscription must specify exactly one of: collection, key, or channel. Filters are optional for collection and key subscriptions.\n\n⚠️ IMPORTANT: Store tokens securely and use HTTPS for all streaming connections. Tokens are single-use per connection and automatically refresh while active.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Token type. Currently supported: \"streaming\"."
                  },
                  "subscriptions": {
                    "type": "array",
                    "description": "For streaming tokens: Array of subscription objects with collection, key, or channel properties.",
                    "items": {
                      "type": "object"
                    }
                  }
                },
                "required": [
                  "type",
                  "subscriptions"
                ]
              }
            }
          }
        }
      }
    },
    "/contents/{projectName}": {
      "post": {
        "summary": "List all items (keys, collections, files) in a project.",
        "description": "List all items (keys, collections, files) in a project.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your project name"
          }
        ]
      }
    }
  }
}